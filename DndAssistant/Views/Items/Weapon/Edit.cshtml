@using static DndAssistant.Scripts.Dictionary
@model DndAssistant.Models.Items.Weapon

@{
    ViewData["Title"] = "Edit";
}
<style>
    .form-inline {
        display: flex;
        align-items: center;
        gap: 10px; /* Добавляет отступ между элементами */
    }


    .form-group {
        margin-right: 15px; /* Отступ между элементами */
    }

</style>

<h1>Edit</h1>

<h4>Weapon</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Edit">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="Name" class="control-label"></label>
                <input asp-for="Name" class="form-control" />
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Weight" class="control-label"></label>
                <input asp-for="Weight" type="number" class="form-control" /> @* type="number" нужен для корректной работы double *@
                <span asp-validation-for="Weight" class="text-danger"></span>
            </div>
            <span>Цена</span>
            <div class="form-group form-inline">

                <div class="form-group mr-2 form-inline">
                    <input asp-for="Cost.Copper" class="form-control" style="width: 80px;" />
                    <span>мм</span>
                    <span asp-validation-for="Cost.Copper" class="text-danger"></span>
                </div>
                <div class="form-group mr-2 form-inline">
                    <input asp-for="Cost.Silver" class="form-control" style="width: 80px;" />
                    <span>см</span>
                    <span asp-validation-for="Cost.Silver" class="text-danger"></span>
                </div>
                <div class="form-group mr-2 form-inline">
                    <input asp-for="Cost.Gold" class="form-control" style="width: 80px;" />
                    <span>зм</span>
                    <span asp-validation-for="Cost.Gold" class="text-danger"></span>
                </div>
            </div>
            <div id="damage-section" class="form-group damage-group">
                <span>Урон</span>
                <div class="form-group form-inline">
                    <div class="form-group mr-2">
                        <input asp-for="Damage.DiceCount" class="form-control" style="width: 80px;" />
                        <span asp-validation-for="Damage.DiceCount" class="text-danger"></span>
                    </div>
                    <div class="form-group mr-2">
                        <select asp-for="Damage.DiceType" class="form-control" asp-items="Html.GetEnumSelectList<Dice>()" style="width: 80px;"></select>
                        <span asp-validation-for="Damage.DiceType" class="text-danger"></span>
                    </div>
                    <div class="form-group mr-2">
                        <select asp-for="Damage.DamageType" class="form-control" asp-items="Html.GetEnumSelectList<DamageTypePhysical>()" style="width: 120px;"></select>
                        <span asp-validation-for="Damage.DamageType" class="text-danger"></span>
                    </div>
                </div>
                </div>

                <div class="form-group">
                    <div class="form-check form-check-inline">
                        <input type="radio"
                               name="IsMartial"
                               value="false"
                               id="simpleWeapon"
                               class="form-check-input"
                        @(Model.IsMartial ? "" : "checked='checked'") />
                        <label class="form-check-label" for="simpleWeapon">
                            Простое
                        </label>
                    </div>
                    <div class="form-check form-check-inline">
                        <input type="radio"
                               name="IsMartial"
                               value="true"
                               id="martialWeapon"
                               class="form-check-input"
                        @(Model.IsMartial ? "checked='checked'" : "") />
                        <label class="form-check-label" for="martialWeapon">
                            Воинское
                        </label>
                    </div>
                </div>
                <div class="form-group">
                    <div class="form-check form-check-inline">
                        <input type="radio"
                               name="IsRanged"
                               value="false"
                               id="meleeWeapon"
                               class="form-check-input"
                        @(Model.IsRanged ? "" : "checked='checked'") />
                        <label class="form-check-label" for="meleeWeapon">
                            Рукопашное
                        </label>
                    </div>
                    <div class="form-check form-check-inline">
                        <input type="radio"
                               name="IsRanged"
                               value="true"
                               id="rangedWeapon"
                               class="form-check-input"
                        @(Model.IsRanged ? "checked='checked'" : "") />
                        <label class="form-check-label" for="rangedWeapon">
                            Дальнобойное
                        </label>
                    </div>
                </div>

                <div id="meleeFields">

                    <div class="form-group form-inline">
                        <div class="form-group form-check">
                            <label class="form-check-label">
                                <input class="form-check-input" id="isVersatile" asp-for="IsVersatile" /> @Html.DisplayNameFor(model => model.IsVersatile)
                            </label>
                        </div>

                        <div id="versatileFildes">
                            <div class="form-group mr-2">
                                <select asp-for="DamageTwoHandedVersatile" class="form-control" asp-items="Html.GetEnumSelectList<Dice>()" style="width: 80px;"></select>
                                <span asp-validation-for="Damage.DamageType" class="text-danger"></span>
                            </div>
                        </div>
                    </div>

                    <div class="form-group form-check">
                        <label class="form-check-label">
                            <input class="form-check-input" asp-for="HasReach" /> @Html.DisplayNameFor(model => model.HasReach)
                        </label>
                    </div>
                    <div class="form-group form-check">
                        <label class="form-check-label">
                            <input class="form-check-input" id="isThrown" asp-for="IsThrown" /> @Html.DisplayNameFor(model => model.IsThrown)
                        </label>
                    </div>
                </div>


                <div id="rangedAndThrownFields">
                    <div class="form-group form-inline">
                        <div class="form-group">
                            <label asp-for="RangeNormal" class="control-label"></label>
                            <input asp-for="RangeNormal" class="form-control" style="width: 120px;" />
                            <span asp-validation-for="RangeNormal" class="text-danger"></span>
                        </div>
                        <div class="form-group">
                            <label asp-for="RangeLong" class="control-label"></label>
                            <input asp-for="RangeLong" class="form-control" style="width: 120px;" />
                            <span asp-validation-for="RangeLong" class="text-danger"></span>
                        </div>
                    </div>
                </div>

                <div id="rangedFields">
                    @* <div class="form-group form-check">
                    <label class="form-check-label">
                    <input class="form-check-input" asp-for="IsAmmunition" /> @Html.DisplayNameFor(model => model.IsAmmunition)
                    </label>
                    </div> *@
                    <div class="form-group form-check">
                        <label class="form-check-label">
                            <input class="form-check-input" asp-for="RequiresReload" /> @Html.DisplayNameFor(model => model.RequiresReload)
                        </label>
                    </div>
                </div>


                <div class="form-group form-check">
                    <label class="form-check-label">
                        <input class="form-check-input" asp-for="IsFinesse" /> @Html.DisplayNameFor(model => model.IsFinesse)
                    </label>
                </div>

                <div class="form-group form-check">
                    <label class="form-check-label">
                        <input class="form-check-input" asp-for="IsTwoHanded" /> @Html.DisplayNameFor(model => model.IsTwoHanded)
                    </label>
                </div>



                <div class="form-group form-check">
                    <label class="form-check-label">
                        <input class="form-check-input" asp-for="IsLight" /> @Html.DisplayNameFor(model => model.IsLight)
                    </label>
                </div>

                <div class="form-group form-check">
                    <label class="form-check-label">
                        <input class="form-check-input" asp-for="IsSpecial" /> @Html.DisplayNameFor(model => model.IsSpecial)
                    </label>
                </div>

                <div class="form-group form-check">
                    <label class="form-check-label">
                        <input class="form-check-input" asp-for="IsHeavy" /> @Html.DisplayNameFor(model => model.IsHeavy)
                    </label>
                </div>

                <div class="form-group">
                    <label asp-for="Description" class="control-label"></label>
                    <input asp-for="Description" class="form-control" />
                    <span asp-validation-for="Description" class="text-danger"></span>
                </div>
            <div class="form-group">
                <input type="submit" value="Save" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
<script>
    document.addEventListener('DOMContentLoaded', () => {
        const meleeRadio = document.getElementById('meleeWeapon');
        const rangedRadio = document.getElementById('rangedWeapon');
        const meleeFields = document.getElementById('meleeFields');
        const rangedFields = document.getElementById('rangedFields');

        const isThrown = document.getElementById('isThrown');
        const rangedAndThrownFields = document.getElementById('rangedAndThrownFields');

        const versatileFildes = document.getElementById('versatileFildes');
        const isVersatile = document.getElementById('isVersatile');

        function updateFields() {
            if (rangedRadio.checked) {
                rangedAndThrownFields.style.display = 'block';
                rangedFields.style.display = 'block';
                meleeFields.style.display = 'none';
            } else if (isThrown.checked) {
                rangedAndThrownFields.style.display = 'block';
                rangedFields.style.display = 'none';
                meleeFields.style.display = 'block';
            } else if (meleeRadio.checked) {
                rangedAndThrownFields.style.display = 'none';
                rangedFields.style.display = 'none';
                meleeFields.style.display = 'block';
            }

            if (isVersatile.checked) {
                versatileFildes.style.display = 'block';
            } else {
                versatileFildes.style.display = 'none';
            }
        }

        // Инициализировать видимость полей при загрузке страницы
        updateFields();

        // Добавить обработчики событий для радиокнопок
        meleeRadio.addEventListener('change', updateFields);
        rangedRadio.addEventListener('change', updateFields);
        isThrown.addEventListener('change', updateFields);
        isVersatile.addEventListener('change', updateFields);


    });

</script>
